<?php

/**
 * @file
 * OS2Web Spotbox module file.
 */

use Drupal\os2web_spotbox\Form\SpotboxForm;
use Drupal\Component\Utility\NestedArray;
use Symfony\Component\Yaml\Yaml;
use Drupal\Core\Render\Element;
use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function os2web_spotbox_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#entity_type'] == 'os2web_spotbox') {
    SpotboxForm::adjustForm($entity_form, $form_state);
  }
}

/**
 * Update entity from yml.
 *
 * Some config like form display needs to be updated via config manager.
 *
 * @param string $ymlFileName
 *   Yml file name.
 * @param string $entityType
 *   The entity type for this storage.
 * @param mixed $id
 *   The ID of the entity to load.
 * @param array $setComponents
 *   Array of components you want to add.
 *   - The key will be what we are setting.
 *   - The value is the key that will be used from the new config file
 *     (Can have in string for array).
 *
 * @throws
 */
function os2web_spotbox_update_entity_from_yml($ymlFileName, $entityType, $id, array $setComponents) {
  $yml = Yaml::parse(file_get_contents(drupal_get_path('module', 'os2web_spotbox') . '/config/optional/' . $ymlFileName . '.yml'));
  $entity = \Drupal::entityTypeManager()
    ->getStorage($entityType)
    ->load($id);
  foreach ($setComponents as $key => $value) {
    $parts = explode('.', $value);
    if (count($parts) == 1) {
      $entity->setComponent($key, $yml[$value]);
    }
    else {
      $value = NestedArray::getValue($yml, $parts);
      if (empty($value)) {
        \Drupal::messenger()->addWarning('Component ' . $key . ' has empty configuration');
        continue;
      }
      $entity->setComponent($key, $value);
    }
  }

  $entity->save();
}

/**
 * Implements hook_theme().
 */
function os2web_spotbox_theme() {
  return [
    'os2web_spotbox' => [
      'render element' => 'elements',
    ],
    'taxonomy_term__os2web_icons' => [
      'base hook' => 'taxonomy_term',
    ],
    'field__taxonomy_term__os2web_icons' => [
      'base hook' => 'field',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function os2web_spotbox_theme_suggestions_os2web_spotbox(array $variables) {
  $suggestions = [];
  $spotbox = $variables['elements']['#os2web_spotbox'];
  $type = $spotbox->getType();
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'os2web_spotbox__' . $type;
  $suggestions[] = 'os2web_spotbox__' . $type . '__' . $sanitized_view_mode;
  $suggestions[] = 'os2web_spotbox__' . $type . '__' . $spotbox->id();
  $suggestions[] = 'os2web_spotbox__' . $type . '__' . $spotbox->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Prepares variables for OS2Web Spotbox templates.
 *
 * Default template: os2web_spotbox.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_os2web_spotbox(array &$variables) {
  // Fetch Spotbox Entity Object.
  $os2web_spotbox = $variables['elements']['#os2web_spotbox'];
  $variables['spotbox'] = $os2web_spotbox;
  $variables['spotbox_type'] = $os2web_spotbox->getType();
  $variables['background_color'] = $os2web_spotbox->getBackgroundColor();

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}
